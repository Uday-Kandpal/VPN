package gui;

import File.Functions;
import core.EMail;
import core.PathStore;
import core.Server;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Timer;
import registry.RegistryEditor;

/**
 *
 * @author Uday Kandpal
 */
public class FTPServerImpl extends javax.swing.JFrame {

    Timer t;
    static Server s;

    /**
     * Creates new form FTPServerXImpl
     */
    public FTPServerImpl() {
        initComponents();
        try {
            ArrayList<RegistryEditor.Pair> queryRegistryKey = RegistryEditor.queryRegistryKey("HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Network\\DataUsage\\Wlan");
            queryRegistryKey.stream().forEach((x) -> {
                jComboBox1.addItem("LAN :" + RegistryEditor.getRegistryNode((String) x.getKey()));
            });
            ArrayList<RegistryEditor.Pair> queryRegistryKey1 = RegistryEditor.queryRegistryKey("HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Network\\DataUsage\\Wwan");
            queryRegistryKey1.stream().forEach((x) -> {
                jComboBox1.addItem("WAN :" + RegistryEditor.getRegistryNode((String) x.getKey()));
            });
        } catch (IOException | InterruptedException ex) {
            //  Logger.getLogger(FTPServerImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("listening to port " + Server.DEFAULT_PORT);

    }

    public FTPServerImpl(boolean tr) {
        initComponents();
        setVisible(tr);
        System.out.println("listening to port " + Server.DEFAULT_PORT);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        reqL = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        Status = new javax.swing.JProgressBar();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Generic Server MyVPN 1.0");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 0, 153), 3, true), "Generic Server Interface", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14), new java.awt.Color(0, 0, 204))); // NOI18N

        reqL.setText("No Requests as of Now");

        jComboBox1.setBackground(new java.awt.Color(153, 0, 0));
        jComboBox1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jComboBox1.setForeground(new java.awt.Color(255, 255, 153));

        jLabel1.setText("Status :");

        jLabel2.setText("Available Network Connections :");

        jButton1.setBackground(new java.awt.Color(102, 51, 0));
        jButton1.setForeground(new java.awt.Color(255, 0, 0));
        jButton1.setText("OFF");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Status, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(73, 73, 73)
                        .addComponent(reqL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 7, Short.MAX_VALUE)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 18, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jButton1)
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(reqL, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(Status, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        jMenu1.setText("Services");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_0, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Open MailServer");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        Thread thread = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    s = new Server(Server.DEFAULT_PORT);
                } catch (IOException ex) {
                    // Logger.getLogger(FTPServerImpl.class.getName()).log(Level.SEVERE, null, ex);
                }
                System.out.println("Connecting");
                while (true) {
                    try {
                        s.connect();
                        reqL.setText("Currently Processing a request");
                        String x = "", y;
                        while (true) {
                            y = s.receive();
                            System.out.println("command-received : " + y);
                            if (y.startsWith("file://")) {
                                s.flushSent();
                                try {
                                    int receiveChar = Integer.parseInt(s.receive());
                                    System.out.println("send-stream : " + receiveChar);
                                    if (receiveChar == 0) {
                                        s.sendFile(y.substring(7), Status, false);
                                    }
                                    if (receiveChar == 1) {
                                        s.sendFile(y.substring(7), Status, true);
                                    }
                                    //s.flushSent();
                                } catch (NoSuchAlgorithmException ex) {
                                    Logger.getLogger(FTPServerImpl.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            } else if (y.startsWith("email://")) {
                                reqL.setText("Receiving an E-Mail");
                                s.send(PathStore.CLIENT_NAME + "@myvpn.com");
                                s.flushSent();
                                String mail = s.receive();
                                String sender = EMail.fromString(mail).getSenderAddress();
                                Functions.File_Input("", PathStore.INBOX + "/" + sender + "." + (1000 * Math.random()), null);
                                reqL.setText("Received an E-Mail");
                            } else if (y.startsWith("name://")) {
                                s.send(PathStore.CLIENT_NAME);
                                s.flushSent();
                            } else if (y.startsWith("message://")) {
                                System.out.println("task: sending file names list");
                                s.sendFile(y.substring(10));
                                s.flushSent();
                            } else if (y.startsWith("search://")) {
                                System.out.println("task: sending file data");
                                s.sendFile(y.substring(9));
                                s.flushSent();
                            } else if (y.startsWith("file-name://")) {
                                System.out.println("task: sending file names list");
                                String as[] = Functions.list_Of_Files_Inside_Folder("docroot/");
                                s.send(Arrays.toString(as));
                                s.flushSent();
                            }
                            if ("BYE".equals(y)) {
                                System.out.println("task: Closing this Connection");
                                break;
                            }
                        }
                        s.disconnect();
                        reqL.setText("No More Request !!!");

                    } catch (IOException ex) {
                        //Logger.getLogger(FTPServerImpl.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }

        });
        thread.start();
    }//GEN-LAST:event_formWindowActivated

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try {
            if (jButton1.getText() == "OFF") {
                jButton1.setText("ON");
                s.disconnect();
            } else if (jButton1.getText() == "ON") {
                jButton1.setText("OFF");
                s.connect();
            }
        } catch (Exception e) {
            if (jButton1.getText() == "ON") {
                Functions.showInputDialog("ERROR!!", "Could not establish connection !!");
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FTPServerImpl.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FTPServerImpl.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FTPServerImpl.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FTPServerImpl.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FTPServerImpl().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar Status;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel reqL;
    // End of variables declaration//GEN-END:variables
}
