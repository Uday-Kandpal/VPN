package gui;

import File.Functions;
import core.AddressFactory;
import core.NetStatus;
import java.awt.Color;
import java.awt.Component;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Image;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.BoxLayout;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.ListCellRenderer;
import javax.swing.ListSelectionModel;

/**
 *
 * @author Uday Kandpal
 */
public class AddressSuggest extends javax.swing.JFrame {

    public static String getSubnet(InetAddress address) {
        byte[] a = address.getAddress();
        String subnet = "";
        for (int i = 0; i < a.length - 1; i++) {
            if (a[i] != 0) {
                subnet += (256 + a[i]) + ".";
            } else {
                subnet += 0 + ".";
            }
        }
        return subnet;
    }

    public static ArrayList<InetAddress> checkHosts(String myHost, int socket, int timeout) {
        ArrayList<InetAddress> al = new ArrayList<>();
        try {
            byte[] buffer = {1};
            DatagramSocket ds = new DatagramSocket(socket);
            ds.setSoTimeout(timeout);
            DatagramPacket dp;
            InetAddress local = InetAddress.getByName(myHost);
            String subnet = getSubnet(local);
            System.out.println(subnet + "*");
            for (int i = 1; i <= 255; i++) {
                String host = subnet + i;
                try {
                    ds.send(new DatagramPacket(buffer, 1, InetAddress.getByName(host), 3333));
                    ds.receive(dp = new DatagramPacket(buffer, 1));
                    if (dp.getPort() == socket && !dp.getAddress().equals(local)) {
                        al.add(dp.getAddress());
                    }
                } catch (IOException e) {
                }
            }
        } catch (SocketException | UnknownHostException e) {
        }
        return al;
    }

    public static class Items extends JPanel {

        public Items(String name, String iconPath) {
            setSize(2000, 30);
            GridLayout l = new GridLayout();
            l.setRows(1);
            l.setColumns(2);
            l.setHgap(20);
            super.setLayout(l);
            Icon j = new ImageIcon(this.getToolkit().getImage(iconPath).getScaledInstance(30, 30, Image.SCALE_REPLICATE));
            JLabel jk = new JLabel();
            jk.setSize(140, 30);
            JLabel jl = new JLabel("        " + AddressFactory.toName(name) + "<" + AddressFactory.toIPAddress(name) + ">");
            jl.setLocation(20, 20);
            super.add(jl).setLocation(20, 20);
            super.add(jk);
            jk.setIcon(j);
            setBackground(Color.WHITE);
            this.setBorder(javax.swing.BorderFactory.createLineBorder(Color.blue));
        }

        public static int getItemWidth() {
            return 340;
        }

        public static int getItemHeight() {
            return 30;
        }

    }

    /**
     * Creates new form AddressSuggest
     */
    public AddressSuggest() {
        setUndecorated(true);
        initComponents();
        GridLayout l = new GridLayout(0, 1);
        l.setVgap(10);
        l.setHgap(10);
        back.setLayout(l);
        List<String> adresses = AddressFactory.getAddresses();
        back.setSize(getWidth() + 20 * adresses.size(), 100 * adresses.size());
        setSize(getWidth() + 20 * adresses.size(), 100 * adresses.size() + 20);
        adresses.stream().forEach((x) -> {
            Items items = new Items(x, "System/images/download.jpeg");
            items.setSize(items.getWidth(), 100);
            String toIPAddress = AddressFactory.toIPAddress(x);
            if (true || NetStatus.isPingedSuccessfully(toIPAddress)) {
                back.add(items);
                Functions.showMessageDialog("INFO!!", "pinged successfully");
            }
        });
        System.out.println(AddressSuggest.checkHosts("10.221.237.234", 5000, 30));
//validate();
    }

    public static void getSuggestionsFromPeers() {
        List<String> adresses = AddressFactory.getAddresses();
        for (String hosts : adresses) {

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        back = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Connections Available !!!");
        setResizable(false);

        back.setBackground(new java.awt.Color(51, 51, 51));

        javax.swing.GroupLayout backLayout = new javax.swing.GroupLayout(back);
        back.setLayout(backLayout);
        backLayout.setHorizontalGroup(
            backLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 532, Short.MAX_VALUE)
        );
        backLayout.setVerticalGroup(
            backLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 520, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(back);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 236, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                    .addGap(0, 0, 0)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 522, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddressSuggest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddressSuggest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddressSuggest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddressSuggest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddressSuggest().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel back;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
